from collections.abc import Iterable, Iterator
from typing import Callable

from typing_extensions import TypeAliasType

from ._types import T

Follow = TypeAliasType("Follow", Callable[[T], bool], type_params=(T,))
Children = TypeAliasType("Children", Callable[[T], Iterator[T]], type_params=(T,))

def tree_leaves(
    root: T, follow: Follow[T] = ..., children: Children[T] = ...
) -> Iterable[T]: ...
def ltree_leaves(
    root: T, follow: Follow[T] = ..., children: Children[T] = ...
) -> list[T]: ...
def tree_nodes(
    root: T, follow: Follow[T] = ..., children: Children[T] = ...
) -> Iterable[T]: ...
def ltree_nodes(
    root: T, follow: Follow[T] = ..., children: Children[T] = ...
) -> list[T]: ...

__all__ = ("tree_leaves", "ltree_leaves", "tree_nodes", "ltree_nodes")
