from typing import Any, Protocol

from typing_extensions import TypeGuard

from ._types import T_co

class SupportPlus(Protocol[T_co]):
    def __add__(self, value: int, /) -> T_co: ...

class SupportMinus(Protocol[T_co]):
    def __sub__(self, value: int, /) -> T_co: ...

class SupportMod(Protocol):
    def __mod__(self, value: int, /) -> int: ...

def isnone(x: Any) -> TypeGuard[None]: ...
def notnone(x: Any) -> bool: ...
def inc(x: SupportPlus[T_co]) -> T_co: ...
def dec(x: SupportMinus[T_co]) -> T_co: ...
def even(x: SupportMod) -> bool: ...
def odd(x: SupportMod) -> bool: ...

__all__ = ("isnone", "notnone", "inc", "dec", "even", "odd")
